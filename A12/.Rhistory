library(bnlearn)
library(dagitty)
library(Rgraphviz)
library(igraph)
rm(list = ls())
# load data
data <- read.table("/Users/limu/Desktop/course/ML/A12/network_assignment_data_set.txt", header = TRUE)
# to factors
data$A <- as.factor(data$A)
data$B <- as.factor(data$B)
data$C <- as.factor(data$C)
data$D <- as.factor(data$D)
data$E <- as.factor(data$E)
data$F <- as.factor(data$F)
# build and plot DAG-structured Bayesian network
network <- hc(data)
plot(network)
# moral graph
moral_graph <- empty.graph(names(data))
arcs <- network$arcs
for (i in 1:nrow(arcs)) {
moral_graph <- set.edge(moral_graph, from=arcs[i,1], to=arcs[i,2])
moral_graph <- set.edge(moral_graph, from=arcs[i,2], to=arcs[i,1])
}
plot(moral_graph)
# cpt E to F
fit_network <- bn.fit(network, data)
cpt_E_to_F <- cpquery(fit_network, event=(A=="a"), evidence=(B=="a"))
print(cpt_E_to_F)
# cpt E to F
fit_network <- bn.fit(network, data)
cpt_E_to_F <- cpquery(fit_network, event=(F=="a"), evidence=(E=="a"))
print(cpt_E_to_F)
library(bnlearn)
library(dagitty)
library(Rgraphviz)
library(igraph)
rm(list = ls())
# load data
data <- read.table("/Users/limu/Desktop/course/ML/A12/network_assignment_data_set.txt", header = TRUE)
# to factors
data$A <- as.factor(data$A)
data$B <- as.factor(data$B)
data$C <- as.factor(data$C)
data$D <- as.factor(data$D)
data$E <- as.factor(data$E)
data$F <- as.factor(data$F)
# build and plot DAG-structured Bayesian network
network <- hc(data)
plot(network)
# 定义 E 和 F 的可能取值
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# 使用循环计算所有可能的情况
for (value_E in values_E) {
for (value_F in values_F) {
# 计算 P(F=value_F | E=value_E) 的概率
cpt <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
# 打印结果
cat("P(F=", value_F, "|E=", value_E, "): ", cpt, "\n", sep="")
}
}
library(bnlearn)
library(dagitty)
library(Rgraphviz)
library(igraph)
rm(list = ls())
# load data
data <- read.table("/Users/limu/Desktop/course/ML/A12/network_assignment_data_set.txt", header = TRUE)
# to factors
data$A <- as.factor(data$A)
data$B <- as.factor(data$B)
data$C <- as.factor(data$C)
data$D <- as.factor(data$D)
data$E <- as.factor(data$E)
data$F <- as.factor(data$F)
# build and plot DAG-structured Bayesian network
network <- hc(data)
plot(network)
# moral graph
moral_graph <- empty.graph(names(data))
arcs <- network$arcs
for (i in 1:nrow(arcs)) {
moral_graph <- set.edge(moral_graph, from=arcs[i,1], to=arcs[i,2])
moral_graph <- set.edge(moral_graph, from=arcs[i,2], to=arcs[i,1])
}
plot(moral_graph)
# cpt E to F
fit_network <- bn.fit(network, data)
# 定义 E 和 F 的可能取值
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# 使用循环计算所有可能的情况
for (value_E in values_E) {
for (value_F in values_F) {
# 计算 P(F=value_F | E=value_E) 的概率
cpt <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
# 打印结果
cat("P(F=", value_F, "|E=", value_E, "): ", cpt, "\n", sep="")
}
}
print(cpt_E_to_F)
fit_network <- bn.fit(network, data)
# 定义 E 和 F 的可能取值
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# 使用循环计算所有可能的情况
for (value_E in values_E) {
for (value_F in values_F) {
# 计算 P(F=value_F | E=value_E) 的概率
cpt_E_to_F <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
# 打印结果
cat("P(F=", value_F, "|E=", value_E, "): ", cpt, "\n", sep="")
}
}
print(cpt_E_to_F)
library(bnlearn)
library(dagitty)
library(Rgraphviz)
library(igraph)
rm(list = ls())
# load data
data <- read.table("/Users/limu/Desktop/course/ML/A12/network_assignment_data_set.txt", header = TRUE)
# to factors
data$A <- as.factor(data$A)
data$B <- as.factor(data$B)
data$C <- as.factor(data$C)
data$D <- as.factor(data$D)
data$E <- as.factor(data$E)
data$F <- as.factor(data$F)
# build and plot DAG-structured Bayesian network
network <- hc(data)
plot(network)
# moral graph
moral_graph <- empty.graph(names(data))
arcs <- network$arcs
for (i in 1:nrow(arcs)) {
moral_graph <- set.edge(moral_graph, from=arcs[i,1], to=arcs[i,2])
moral_graph <- set.edge(moral_graph, from=arcs[i,2], to=arcs[i,1])
}
plot(moral_graph)
# cpt E to F
fit_network <- bn.fit(network, data)
# 定义 E 和 F 的可能取值
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# 使用循环计算所有可能的情况
for (value_E in values_E) {
for (value_F in values_F) {
# 计算 P(F=value_F | E=value_E) 的概率
cpt_E_to_F <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
# 打印结果
cat("P(F=", value_F, "|E=", value_E, "): ", cpt, "\n", sep="")
}
}
library(bnlearn)
library(dagitty)
library(Rgraphviz)
library(igraph)
rm(list = ls())
# load data
data <- read.table("/Users/limu/Desktop/course/ML/A12/network_assignment_data_set.txt", header = TRUE)
# to factors
data$A <- as.factor(data$A)
data$B <- as.factor(data$B)
data$C <- as.factor(data$C)
data$D <- as.factor(data$D)
data$E <- as.factor(data$E)
data$F <- as.factor(data$F)
# build and plot DAG-structured Bayesian network
network <- hc(data)
plot(network)
# moral graph
moral_graph <- empty.graph(names(data))
arcs <- network$arcs
for (i in 1:nrow(arcs)) {
moral_graph <- set.edge(moral_graph, from=arcs[i,1], to=arcs[i,2])
moral_graph <- set.edge(moral_graph, from=arcs[i,2], to=arcs[i,1])
}
plot(moral_graph)
# cpt E to F
fit_network <- bn.fit(network, data)
# 定义 E 和 F 的可能取值
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# 使用循环计算所有可能的情况
for (value_E in values_E) {
for (value_F in values_F) {
# 计算 P(F=value_F | E=value_E) 的概率
cpt_E_to_F <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
# 打印结果
cat("P(F=", value_F, "|E=", value_E, "): ", cpt_E_to_F, "\n", sep="")
}
}
# cpt E to F
fit_network <- bn.fit(network, data)
values_E <- c("a", "b", "c")
values_F <- c("a", "b", "c")
# All combinations
for (value_E in values_E) {
for (value_F in values_F) {
# P(F=value_F | E=value_E)
cpt_E_to_F <- cpquery(fit_network, event=(F==value_F), evidence=(E==value_E))
cat("P(F=", value_F, "|E=", value_E, "): ", cpt_E_to_F, "\n", sep="")
}
}
